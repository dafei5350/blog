(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{535:function(t,e,a){"use strict";a.r(e);var n=a(16),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[t._v("#")]),t._v(" 时间复杂度")]),t._v(" "),a("p",[t._v("时间复杂度可以理解为一个函数，描述了所使用的算法所需要消耗的运行时间，方便开发者估算出完成该算法所需要的时间。一般把操作的单元数量来代表程序消耗的时间，假设算法的问题规模为 "),a("code",[t._v("n")]),t._v(" ，计算机 CPU 的每个执行单元所消耗的时间都是相同的，那么操作的单元数量使用函数 "),a("code",[t._v("f(n)")]),t._v("  表示，随着数据规模 "),a("code",[t._v("(n)")]),t._v("  增大，那么算法执行时间的增长率和 "),a("code",[t._v("f(n)")]),t._v("  的增长率之间的关系被称为算法渐进时间复杂度，即时间复杂度 "),a("code",[t._v("O(f(n))")])]),t._v(" "),a("h2",{attrs:{id:"大o表示法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大o表示法"}},[t._v("#")]),t._v(" 大 O 表示法")]),t._v(" "),a("p",[t._v("大 O 表示法可以用来计算算法执行时间的上限")])])}),[],!1,null,null,null);e.default=s.exports}}]);